@function -ocha-equal($assert, $expected) {
  @if map-get($assert, deep) {
    @return -ocha-eql($assert, $expected);
  }

  $returned: map-get($assert, value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notEqual', 'equal');
  $result: if($returned == $expected, true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to equal #{$expected}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not equal #{$expected}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: $expected,
    returned: $returned,
    type: null,
  )));
}

@function -ocha-above($assert, $floor) {
  $returned: -ocha-comparison-value($assert);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notAbove', 'above');
  $result: if($returned > $floor, true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to be greater than #{$floor}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not be greater than #{$floor}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: '> #{$floor}',
    returned: $returned,
    type: 'number',
  )));
}

@function -ocha-least($assert, $floor) {
  $returned: -ocha-comparison-value($assert);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notAtLeast', 'atLeast');
  $result: if($returned >= $floor, true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to be at least #{$floor}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not be at least #{$floor}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: '>= #{$floor}',
    returned: $returned,
    type: 'number',
  )));
}

@function -ocha-below($assert, $ceiling) {
  $returned: -ocha-comparison-value($assert);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notBelow', 'below');
  $result: if($returned < $ceiling, true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to be below #{$ceiling}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not be below #{$ceiling}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: '< #{$ceiling}',
    returned: $returned,
    type: 'number',
  )));
}

@function -ocha-most($assert, $ceiling) {
  $returned: -ocha-comparison-value($assert);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notAtMost', 'atMost');
  $result: if($returned <= $ceiling, true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to be at most #{$ceiling}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not be at most #{$ceiling}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: '<= #{$ceiling}',
    returned: $returned,
    type: 'number',
  )));
}

@function -ocha-within($assert, $range) {
  $returned: -ocha-comparison-value($assert);
  $negative: map-get($assert, negative);
  $floor: nth($range, 1);
  $ceiling: nth($range, 2);
  $test: if($negative, 'notWithin', 'within');
  $result: if($returned >= $floor and $returned <= $ceiling, true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to be within #{$floor}..#{$ceiling}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not be within #{$floor}..#{$ceiling}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: '#{$floor} <= #{$ceiling} <= #{$ceiling}',
    returned: $returned,
    type: 'number',
  )));
}

@function -ocha-closeTo($assert, $options) {
  $returned: map-get($assert, value);
  $negative: map-get($assert, negative);
  $base: nth($options, 1);
  $delta: nth($options, 2);
  $floor: $base - $delta;
  $ceiling: $base + $delta;
  $test: if($negative, 'notCloseTo', 'closeTo');
  $result: if($returned >= $floor and $returned <= $ceiling, true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to be within #{$delta} of #{$base}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not be within #{$delta} of #{$base}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: '#{$floor} <= #{$ceiling} <= #{$ceiling}',
    returned: $returned,
    type: 'number',
  )));
}
