@function -ocha-a($assert, $type) {
  $returned: map-get($assert, value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notA', 'a');
  $result: if(type-of($returned) == $type, true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to be a #{$type}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not be a #{$type}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: $type,
    returned: type-of($returned),
    type: 'type',
  )));
}

@function -ocha-an($assert, $type) {
  @return -ocha-a($assert, $type);
}

@function -ocha-ok($assert, $null) {
  $returned: map-get($assert, value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notOk', 'ok');
  $result: if(-ocha-check-ok($returned), true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{inspect($returned)} to be truthy';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{inspect($returned)} to not be truthy';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: -ocha-ok-expect($returned),
    returned: -ocha-ok-returned($returned),
    type: -ocha-ok-type($returned),
  )));
}

@function -ocha-true($assert, $null) {
  $returned: map-get($assert, value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notTrue', 'true');
  $result: if($returned == true, true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to be true';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not be true';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: 'true',
    returned: $returned,
    type: 'value',
  )));
}

@function -ocha-false($assert, $null) {
  $returned: map-get($assert, value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notFalse', 'false');
  $result: if($returned == false, true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to be false';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not be false';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: 'false',
    returned: $returned,
    type: 'value',
  )));
}

@function -ocha-null($assert, $null) {
  $returned: map-get($assert, value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notNull', 'null');
  $result: if($returned == null, true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to be null';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not be null';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: 'null',
    returned: $returned,
    type: 'value',
  )));
}
