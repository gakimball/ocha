/// Determine the expected value for a call to the `ok` assertion.
///   - For lists, it's a length greater than 0.
///   - For numbers, it's a non-0 value.
///   - For all other values, it's `true`.
/// @param {*} $value - Value to parse.
/// @returns {String} Expect value.
@function -ocha-ok-expected($value) {
  $type: type-of($value);

  @if $type == 'list' {
    @return '> 0';
  }
  @else if $type == 'number' {
    @return '!= 0';
  }
  @else {
    @return 'true';
  }
}

/// Determine the real returned value for a call to the `ok` assertion.
///   - For lists, it's the length of the list (instead of the list itself).
///   - For all other values, it's the value itself.
/// @param {*} $value - Value to parse.
/// @returns {String} Return value.
@function -ocha-ok-returned($value) {
  @if type-of($value) == 'list' {
    @return inspect(length($value));
  }
  @else {
    @return inspect($value);
  }
}

/// Determine the type string to pass to an `ok` assertion.
///   - For lists, the length of the list is being checked, so `length` is used.
///   - For all other values, the value itself is being checked, so the generic term `value` is used.
/// @param {*} $value - Value to parse.
/// @returns {String} Type value.
@function -ocha-ok-type($value) {
  @if type-of($value) == 'list' {
    @return 'length';
  }
  @else {
    @return 'value';
  }
}
