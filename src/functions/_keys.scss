@function -ocha-all($assert) {
  @return map-merge($assert, (all: true));
}

@function -ocha-any($assert) {
  @return map-merge($assert, (all: false));
}

@function -ocha-keys($assert, $keys) {
  $returned: map-get($assert, value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notKeys', 'keys');
  $result: if(-ocha-check-keys($returned, $keys, map-get($assert, all), map-get($assert, only)), true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{inspect($returned)} to have keys #{$keys}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{inspect($returned)} to not have keys #{$keys}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: $keys,
    returned: map-keys($returned),
    type: 'keys',
  )));
}

@function -ocha-property($assert, $property) {
  @if map-get($assert, deep) {
    @return -ocha-deep-property($assert, $property);
  }

  $returned: map-get($assert, value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notProperty', 'property');
  $result: if(-ocha-check-property($returned, $property), true, false);
  $message: '';

  @if not $negative {
    @if type-of($property) != 'list' {
      $message: 'Expected #{inspect($returned)} to have property #{$property}';
    }
    @else {
      $message: 'Expected #{inspect($returned)} to have property #{nth($property, 1)} with value #{nth($property, 2)}';
    }
  }
  @else {
    $result: if($result, false, true);

    @if type-of($property) != 'list' {
      $message: 'Expected #{inspect($returned)} to not have property #{$property}';
    }
    @else {
      $message: 'Expected #{inspect($returned)} to not have property #{nth($property, 1)} with value #{nth($property, 2)}';
    }
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: if(type-of($property) == 'list', nth($property, 1), $property),
    returned: map-keys($returned),
    type: 'key',
  )));

  $map: inspect($map);
}

@function -ocha-eql($assert, $expected) {
  $returned: map-get($assert, value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notEql', 'eql');
  $result: if($returned == $expected, true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{inspect($returned)} to deep equal #{inspect($expected)}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{inspect($returned)} to not deep equal #{inspect($expected)}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: inspect($expected),
    returned: inspect($returned),
    type: null,
  )));
}
