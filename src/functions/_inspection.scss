@function -ocha-length($assert) {
  @return map-merge($assert, (length: true));
}

@function -ocha-lengthOf($assert, $expected) {
  $value: map-get($assert, value);
  $returned: length($value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notLengthOf', 'lengthOf');
  $result: if($returned == $expected, true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to have length #{$expected}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not have length #{$expected}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: $expected,
    returned: $returned,
    type: 'length',
  )));
}

@function -ocha-empty($assert, $null) {
  $value: map-get($assert, value);
  $returned: length($value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notEmpty', 'empty');
  $result: if($returned == 0, true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to be empty';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not be empty';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: 0,
    returned: $returned,
    type: 'length',
  )));
}

@function -ocha-string($assert, $substr) {
  $value: map-get($assert, value);
  $returned: length($value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notContainString', 'containString');
  $result: if(str-index($value, $substr), true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to contain string #{$substr}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not contain string #{$substr}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: $substr,
    returned: $returned,
    type: 'string',
  )));
}

@function -ocha-contain($assert, $substr: null) {
  @if $substr == null {
    @return map-merge($assert, (only: false));
  }

  $returned: map-get($assert, value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notContain', 'contain');
  $result: if(-ocha-check-contains($returned, $substr), true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to contain #{$substr}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not contain #{$substr}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: $substr,
    returned: $returned,
    type: null,
  )));
}

@function -ocha-include($assert, $substr) {
  @return -ocha-contain($assert, $substr);
}

@function -ocha-oneOf($assert, $list) {
  $returned: map-get($assert, value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notOneOf', 'oneOf');
  $result: if(-ocha-check-oneOf($returned, $list), true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to be one of #{$list}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to not be one of #{$list}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: $list,
    returned: $returned,
    type: null,
  )));
}

@function -ocha-members($assert, $list) {
  $returned: map-get($assert, value);
  $negative: map-get($assert, negative);
  $test: if($negative, 'notMembers', 'members');
  $result: if(-ocha-check-members($returned, $list), true, false);
  $message: '';

  @if not $negative {
    $message: 'Expected #{$returned} to have items #{$list}';
  }
  @else {
    $result: if($result, false, true);
    $message: 'Expected #{$returned} to have items #{$list}';
  }

  @return map-merge($assert, (result: (
    test: $test,
    passed: $result,
    assertion: $message,
    expected: $list,
    returned: $returned,
    type: null,
  )));
}
