////
/// This mixin consumes the `result` property of an assertion object and converts it into True-compatible CSS. It should have these properties:
///   - test: The type of test (i.e., equal, is true, has key).
///   - passed: Boolean indicating if the test passed.
///   - assertion: Error message to display if the test failed.
///   - expected: Value expected by the assertion.
///   - returned: Input value given to the assertion.
///   - type: Type of the expected/returned values.
////

/// Create a CSS declaration compatible with True, displaying the result of an assertion.
/// All of Ocha's assertions compile down to a single "pass" or "fail", which is inserted into the CSS output.
/// @param {Map} $result - The `result` key of an assertion object.
/// @output A True-compatible CSS declaration.
@mixin -ocha-true-assert($result) {
  $passed: if(map-get($result, passed), PASS, FAIL);
  $expected-type: null;
  $returned-type: null;

  @if map-get($result, type) != null {
    $expected-type: map-get($result, type);
    $returned-type: $expected-type;
  }
  @else {
    $expected-type: type-of(map-get($result, expected));
    $returned-type: type-of(map-get($result, returned));
  }

  @include _true-assert-start(map-get($result, assertion));

  .assert-#{map-get($result, test)} {
    -result: $passed;
    -description: map-get($result, assertion);

    @if $passed == FAIL {
      -expected--#{$expected-type}: map-get($result, expected);
      -returned--#{$returned-type}: map-get($result, returned);
    }
  }

  @include _true-assert-stop($passed);
}
